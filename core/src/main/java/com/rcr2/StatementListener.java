package com.rcr2;

import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.misc.NotNull;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

public class StatementListener<F extends Frame<F>> implements Rcr2Listener {

    private final Context<F> context;
    private final SessionInput<F> sessionInput;
    private int expressionLevel = 0;

    public StatementListener(Context<F> context, WorkingMemory<F> workingMemory) {
        this.context = context;
        this.sessionInput = new SessionInput<>(context, workingMemory);
    }

    public SessionInput<F> getSessionInput() {
        return sessionInput;
    }

    public void enterExpression(@NotNull Rcr2Parser.ExpressionContext ctx) {
        this.expressionLevel++;
    }

    @Override
    public void enterAlias(Rcr2Parser.AliasContext ctx) {
        sessionInput.setAlias(ctx.getText());
    }

    @Override
    public void exitAlias(Rcr2Parser.AliasContext ctx) {

    }

    @Override
    public void enterFunction(Rcr2Parser.FunctionContext ctx) {
        sessionInput.setFunction(ctx.USER_WORD().getText());
    }

    @Override
    public void exitFunction(Rcr2Parser.FunctionContext ctx) {

    }

    @Override
    public void enterArg(Rcr2Parser.ArgContext ctx) {
        if (ctx.getParent() instanceof Rcr2Parser.UserArgGroupContext) {
            sessionInput.addArg(ctx.USER_WORD().getText());
        }
        // we only add nested expressions if they are generated by the system
        // in this case we actually only consider arguments 1 level deep
        else if (ctx.getParent() instanceof Rcr2Parser.TopLevelArgGroupContext
                && this.expressionLevel < 2) {
            if (ctx.expression() != null)
                sessionInput.addArg(ctx.expression().getText());
            else
                sessionInput.addArg(ctx.USER_WORD().getText());
        }
    }

    @Override
    public void exitArg(Rcr2Parser.ArgContext ctx) {

    }

    @Override
    public void enterArggroup(Rcr2Parser.ArggroupContext ctx) {

    }

    @Override
    public void exitArggroup(Rcr2Parser.ArggroupContext ctx) {

    }

    @Override
    public void enterUserArgGroup(Rcr2Parser.UserArgGroupContext ctx) {

    }

    @Override
    public void exitUserArgGroup(Rcr2Parser.UserArgGroupContext ctx) {

    }

    @Override
    public void enterTopLevelArgGroup(Rcr2Parser.TopLevelArgGroupContext ctx) {

    }

    @Override
    public void exitTopLevelArgGroup(Rcr2Parser.TopLevelArgGroupContext ctx) {

    }

    public void exitExpression(@NotNull Rcr2Parser.ExpressionContext ctx) {
        this.expressionLevel--;
    }

    public void enterAssignment(@NotNull Rcr2Parser.AssignmentContext ctx) {

    }

    public void exitAssignment(@NotNull Rcr2Parser.AssignmentContext ctx) {

    }

    public void enterStatement(@NotNull Rcr2Parser.StatementContext ctx) {

    }

    public void exitStatement(@NotNull Rcr2Parser.StatementContext ctx) {

    }

    public void enterSideeffect(@NotNull Rcr2Parser.SideeffectContext ctx) {

    }

    public void exitSideeffect(@NotNull Rcr2Parser.SideeffectContext ctx) {

    }

    public void visitTerminal(TerminalNode terminalNode) {

    }

    public void visitErrorNode(ErrorNode errorNode) {

    }

    public void enterEveryRule(ParserRuleContext parserRuleContext) {

    }

    public void exitEveryRule(ParserRuleContext parserRuleContext) {

    }
}
